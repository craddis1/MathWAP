"(b1*D1^4*(7*(b2 + 2*(-1 + ct^2)*g2)*gr2*k1*k2*(k1^2 + k2^2)*k3^2 + b1*(beta6*k1^2*k2^2*(10*k1*k2 + 4*ct^2*k1*k2 + 7*ct*(k1^2 + k2^2)) + beta7*k1^2*k2^2*(6*k1*k2 + 8*ct^2*k1*k2 + 7*ct*(k1^2 + k2^2)) + (4*ct^2*gr2*k1*k2*(k1^2 + k2^2) + (7*beta12 + 10*gr2)*k1*k2*(k1^2 + k2^2) + 7*ct*(beta11*k1^2*k2^2 + gr2*(k1^2 + k2^2)^2))*k3^2))*Pk1*Pk2)\/(7*k1^3*k2^3*k3^2) + (D1^4*(7*f*(b2 + 2*(-1 + ct^2)*g2)*gr2*k1^2*k2*k3^4 + 7*b1^2*k2*(beta10*k1^3*k2*(3*k1*k2 + ct^2*k1*k2 + 2*ct*(k1^2 + k2^2)) + (beta13*k1^2 + beta9*k1^2 + f*gr2*(k1^2 + k2^2))*k3^4) + b1*k3^2*(4*ct^2*k1^2*k2*((beta6 + 2*beta7)*f*k2^2 + 2*beta19*gr1*k2^2 + f*gr2*(2*k1^2 + 2*k2^2 + k3^2)) + k2*(gr1*(6*beta19*k1^2*k2^2 - 7*(beta14*k1^2 + beta16*k2^2)*k3^2) + f*(10*beta6*k1^2*k2^2 + 6*beta7*k1^2*k2^2 + 7*beta12*k1^2*k3^2 + 7*beta12*k2^2*k3^2 + 2*gr2*k1^2*(3*k1^2 + 3*k2^2 + 5*k3^2))) + 7*ct*k1*(gr1*k2^2*(beta19*(k1^2 + k2^2) - beta15*k3^2) + f*(gr2*(k1^2 + k2^2)*(k1^2 + k2^2 + k3^2) + k2^2*(beta6*(k1^2 + k2^2) + beta7*(k1^2 + k2^2) + beta11*k3^2)))))*mu^2*Pk1*Pk2)\/(7*k1^2*k2^3*k3^4) + (D1^4*(f^2*gr2*k1*(6*k1*k2 + 8*ct^2*k1*k2 + 7*ct*(k1^2 + k2^2))*k3^2 + 7*b1*k2*(beta10*f*k1*k2*(3*k1*k2 + ct^2*k1*k2 + 2*ct*(k1^2 + k2^2)) + (beta13*f + beta9*f - beta17*gr1 + f^2*gr2)*k3^4))*mu^4*Pk1*Pk2)\/(7*k2^3*k3^4) + (D1^4*(-7*(b2 + 2*(-1 + ct^2)*g2)*gr1^2*k1^2*k2^2*k3^4 + 7*b1^2*(2*beta10*k1^3*k2^3*(3*k1*k2 + ct^2*k1*k2 + 2*ct*(k1^2 + k2^2)) + ((beta8 + 2*beta9)*k1^2*k2^2 + f*gr2*(k1^2 + k2^2)^2)*k3^4) + b1*k3^2*(12*f*gr2*k1^4*k2^2 + 12*f*gr2*k1^2*k2^4 + beta19*gr1*k1*k2*(k1^2 + k2^2)*(6*k1*k2 + 8*ct^2*k1*k2 + 7*ct*(k1^2 + k2^2)) - 7*beta14*gr1*k1^4*k3^2 - 14*beta16*gr1*k1^2*k2^2*k3^2 - 10*gr1^2*k1^2*k2^2*k3^2 - 7*beta14*gr1*k2^4*k3^2 + 4*ct^2*k1^2*k2^2*(4*f*gr2*(k1^2 + k2^2) - gr1^2*k3^2) + 7*ct*k1*k2*(k1^2 + k2^2)*(2*f*gr2*(k1^2 + k2^2) - gr1*(beta15 + gr1)*k3^2)))*mu*mu2*Pk1*Pk2)\/(7*k1^3*k2^3*k3^4) + (D1^4*(7*b1*(2*beta10*f*k1*k2^3*(3*k1*k2 + ct^2*k1*k2 + 2*ct*(k1^2 + k2^2)) + (-(beta17*gr1*k1^2) - beta18*gr1*k2^2 + f*(beta8 + 2*beta9 - gr1^2)*k2^2 + 2*f^2*gr2*(k1^2 + k2^2))*k3^4) + f*k3^2*(-6*gr1^2*k1^2*k2^2 + 12*f*gr2*k1^2*k2^2 - 8*ct^2*(gr1^2 - 2*f*gr2)*k1^2*k2^2 + beta19*gr1*k1*k2*(6*k1*k2 + 8*ct^2*k1*k2 + 7*ct*(k1^2 + k2^2)) - 7*beta14*gr1*k1^2*k3^2 - 7*beta16*gr1*k2^2*k3^2 - 7*ct*k1*k2*(gr1^2*(k1^2 + k2^2) - 2*f*gr2*(k1^2 + k2^2) + beta15*gr1*k3^2)))*mu^3*mu2*Pk1*Pk2)\/(7*k1*k2^3*k3^4) + (D1^4*f*(-(beta17*gr1) + f^2*gr2)*k1*mu^5*mu2*Pk1*Pk2)\/k2^3 + (D1^4*(7*f*(b2 + 2*(-1 + ct^2)*g2)*gr2*k1*k2^2*k3^4 + b1*k3^2*(7*beta19*ct*gr1*k1^4*k2 + 7*ct*f*gr2*k1^4*k2 + 6*beta19*gr1*k1^3*k2^2 + 8*beta19*ct^2*gr1*k1^3*k2^2 + 6*f*gr2*k1^3*k2^2 + 8*ct^2*f*gr2*k1^3*k2^2 + 7*beta19*ct*gr1*k1^2*k2^3 + 14*ct*f*gr2*k1^2*k2^3 + 6*f*gr2*k1*k2^4 + 8*ct^2*f*gr2*k1*k2^4 + 7*ct*f*gr2*k2^5 + beta6*f*k1^2*k2*(10*k1*k2 + 4*ct^2*k1*k2 + 7*ct*(k1^2 + k2^2)) + beta7*f*k1^2*k2*(6*k1*k2 + 8*ct^2*k1*k2 + 7*ct*(k1^2 + k2^2)) + 7*beta12*f*k1^3*k3^2 - 7*beta16*gr1*k1^3*k3^2 + 7*beta11*ct*f*k1^2*k2*k3^2 - 7*beta15*ct*gr1*k1^2*k2*k3^2 + 7*ct*f*gr2*k1^2*k2*k3^2 + 7*beta12*f*k1*k2^2*k3^2 - 7*beta14*gr1*k1*k2^2*k3^2 + 10*f*gr2*k1*k2^2*k3^2 + 4*ct^2*f*gr2*k1*k2^2*k3^2 + 7*ct*f*gr2*k2^3*k3^2) + 7*b1^2*k1*(beta10*k1*k2^3*(3*k1*k2 + ct^2*k1*k2 + 2*ct*(k1^2 + k2^2)) + ((beta13 + beta9)*k2^2 + f*gr2*(k1^2 + k2^2))*k3^4))*mu2^2*Pk1*Pk2)\/(7*k1^3*k2^2*k3^4) + (D1^4*(f*k3^2*(14*beta19*ct*gr1*k1^3*k2 - 14*ct*gr1^2*k1^3*k2 + 14*ct*f*gr2*k1^3*k2 + 12*beta19*gr1*k1^2*k2^2 + 16*beta19*ct^2*gr1*k1^2*k2^2 - 12*gr1^2*k1^2*k2^2 - 16*ct^2*gr1^2*k1^2*k2^2 + 12*f*gr2*k1^2*k2^2 + 16*ct^2*f*gr2*k1^2*k2^2 + 14*beta19*ct*gr1*k1*k2^3 - 14*ct*gr1^2*k1*k2^3 + 14*ct*f*gr2*k1*k2^3 + beta6*f*k1*k2*(10*k1*k2 + 4*ct^2*k1*k2 + 7*ct*(k1^2 + k2^2)) + beta7*f*k1*k2*(6*k1*k2 + 8*ct^2*k1*k2 + 7*ct*(k1^2 + k2^2)) + 7*beta12*f*k1^2*k3^2 - 7*beta14*gr1*k1^2*k3^2 - 7*beta16*gr1*k1^2*k3^2 + 7*beta11*ct*f*k1*k2*k3^2 - 14*beta15*ct*gr1*k1*k2*k3^2 + 7*beta12*f*k2^2*k3^2 - 7*beta14*gr1*k2^2*k3^2 - 7*beta16*gr1*k2^2*k3^2) + 7*b1*(k1^2 + k2^2)*(beta10*f*k1*k2*(3*k1*k2 + ct^2*k1*k2 + 2*ct*(k1^2 + k2^2)) + (beta13*f + beta9*f - beta18*gr1 - f*gr1^2 + 3*f^2*gr2)*k3^4))*mu^2*mu2^2*Pk1*Pk2)\/(7*k1^2*k2^2*k3^4) + (D1^4*f*(beta10*f*k1*k2*(3*k1*k2 + ct^2*k1*k2 + 2*ct*(k1^2 + k2^2)) + (beta13*f + beta9*f - beta17*gr1 - beta18*gr1 - f*gr1^2 + 2*f^2*gr2)*k3^4)*mu^4*mu2^2*Pk1*Pk2)\/(k2^2*k3^4) + (D1^4*(7*b1*(2*beta10*f*k1^3*k2*(3*k1*k2 + ct^2*k1*k2 + 2*ct*(k1^2 + k2^2)) + (beta8*f*k1^2 + 2*beta9*f*k1^2 - beta18*gr1*k1^2 - f*gr1^2*k1^2 + 2*f^2*gr2*k1^2 - beta17*gr1*k2^2 + 2*f^2*gr2*k2^2)*k3^4) + f*k3^2*(-6*gr1^2*k1^2*k2^2 + 12*f*gr2*k1^2*k2^2 - 8*ct^2*(gr1^2 - 2*f*gr2)*k1^2*k2^2 + beta19*gr1*k1*k2*(6*k1*k2 + 8*ct^2*k1*k2 + 7*ct*(k1^2 + k2^2)) - 7*beta16*gr1*k1^2*k3^2 - 7*beta14*gr1*k2^2*k3^2 - 7*ct*k1*k2*(gr1^2*(k1^2 + k2^2) - 2*f*gr2*(k1^2 + k2^2) + beta15*gr1*k3^2)))*mu*mu2^3*Pk1*Pk2)\/(7*k1^3*k2*k3^4) + (D1^4*f*(2*beta10*f*k1*k2*(3*k1*k2 + ct^2*k1*k2 + 2*ct*(k1^2 + k2^2)) + (beta8*f + 2*beta9*f - 2*beta18*gr1 - 2*f*gr1^2 + 2*f^2*gr2)*k3^4)*mu^3*mu2^3*Pk1*Pk2)\/(k1*k2*k3^4) + (D1^4*(f^2*gr2*k2*(6*k1*k2 + 8*ct^2*k1*k2 + 7*ct*(k1^2 + k2^2))*k3^2 + 7*b1*k1*(beta10*f*k1*k2*(3*k1*k2 + ct^2*k1*k2 + 2*ct*(k1^2 + k2^2)) + (beta13*f + beta9*f - beta17*gr1 + f^2*gr2)*k3^4))*mu2^4*Pk1*Pk2)\/(7*k1^3*k3^4) + (D1^4*f*(beta10*f*k1*k2*(3*k1*k2 + ct^2*k1*k2 + 2*ct*(k1^2 + k2^2)) + (beta13*f + beta9*f - beta17*gr1 - beta18*gr1 - f*gr1^2 + 2*f^2*gr2)*k3^4)*mu^2*mu2^4*Pk1*Pk2)\/(k1^2*k3^4) + (D1^4*f*(-(beta17*gr1) + f^2*gr2)*k2*mu*mu2^5*Pk1*Pk2)\/k1^3"