"((I\/165)*D1^4*Sqrt[Pi\/21]*Pk1*Pk3*st*(33*b1^2*k2^2*(f*gr1*(4*k1^4 + 16*ct*k1^3*k2 - 16*ct*k1*k2*k3^2 + 4*k3^4 + k1^2*(12*ct^2*k2^2 - 8*k3^2 - 3*k2^2*st^2)) + k3^2*(-4*beta18*k1*(k1 + 2*ct*k2) + 3*beta17*(4*k1^2 + 8*ct*k1*k2 + k2^2*(4*ct^2 - st^2)))) + f*(11*beta19*f*k1*((-1 + 2*C)*k1^3 + (-3 + 4*C)*ct*k1^2*k2 + 2*(-1 + C)*ct^2*k1*k2^2 + (1 - 2*C)*k1*k3^2 + ct*k2*k3^2)*(8*k1^2 + 32*ct*k1*k2 + 3*k2^2*(8*ct^2 + st^2)) + k2^2*(264*beta16*f*k1^4 + 180*beta17*f*k1^4 - 60*beta18*f*k1^4 - 264*ct^2*f*gr1*k1^4 + 528*C*ct^2*f*gr1*k1^4 - 264*g2*gr1*k1^4 + 528*beta16*ct*f*k1^3*k2 + 1080*beta17*ct*f*k1^3*k2 - 360*beta18*ct*f*k1^3*k2 - 1144*ct^3*f*gr1*k1^3*k2 + 1760*C*ct^3*f*gr1*k1^3*k2 - 1056*ct*g2*gr1*k1^3*k2 + 264*beta16*ct^2*f*k1^2*k2^2 + 1800*beta17*ct^2*f*k1^2*k2^2 - 540*beta18*ct^2*f*k1^2*k2^2 - 1584*ct^4*f*gr1*k1^2*k2^2 + 1936*C*ct^4*f*gr1*k1^2*k2^2 + 180*ct^2*f^2*gr1*k1^2*k2^2 - 1320*ct^2*g2*gr1*k1^2*k2^2 + 1200*beta17*ct^3*f*k1*k2^3 - 240*beta18*ct^3*f*k1*k2^3 - 704*ct^5*f*gr1*k1*k2^3 + 704*C*ct^5*f*gr1*k1*k2^3 + 480*ct^3*f^2*gr1*k1*k2^3 - 528*ct^3*g2*gr1*k1*k2^3 + 300*beta17*ct^4*f*k2^4 + 300*ct^4*f^2*gr1*k2^4 - 176*beta16*f*k1^2*k3^2 - 132*b2*gr1*k1^2*k3^2 + 264*ct^2*f*gr1*k1^2*k3^2 - 528*C*ct^2*f*gr1*k1^2*k3^2 + 264*g2*gr1*k1^2*k3^2 - 176*beta16*ct*f*k1*k2*k3^2 - 264*b2*ct*gr1*k1*k2*k3^2 + 616*ct^3*f*gr1*k1*k2*k3^2 - 704*C*ct^3*f*gr1*k1*k2*k3^2 + 528*ct*g2*gr1*k1*k2*k3^2 + 352*ct^4*f*gr1*k2^2*k3^2 - 33*f*gr1*k1^4*st^2 + 66*C*f*gr1*k1^4*st^2 - 231*ct*f*gr1*k1^3*k2*st^2 + 396*C*ct*f*gr1*k1^3*k2*st^2 + 33*beta16*f*k1^2*k2^2*st^2 + 210*beta17*f*k1^2*k2^2*st^2 - 63*beta18*f*k1^2*k2^2*st^2 - 462*ct^2*f*gr1*k1^2*k2^2*st^2 + 594*C*ct^2*f*gr1*k1^2*k2^2*st^2 + 21*f^2*gr1*k1^2*k2^2*st^2 + 420*beta17*ct*f*k1*k2^3*st^2 - 84*beta18*ct*f*k1*k2^3*st^2 - 264*ct^3*f*gr1*k1*k2^3*st^2 + 264*C*ct^3*f*gr1*k1*k2^3*st^2 + 168*ct*f^2*gr1*k1*k2^3*st^2 + 210*beta17*ct^2*f*k2^4*st^2 + 210*ct^2*f^2*gr1*k2^4*st^2 + 33*f*gr1*k1^2*k3^2*st^2 - 66*C*f*gr1*k1^2*k3^2*st^2 + 165*ct*f*gr1*k1*k2*k3^2*st^2 - 264*C*ct*f*gr1*k1*k2*k3^2*st^2 + 132*ct^2*f*gr1*k2^2*k3^2*st^2 + 10*beta17*f*k2^4*st^4 + 10*f^2*gr1*k2^4*st^4 - 11*beta15*f*k1*(k1 + ct*k2)*(8*k1^2 + 32*ct*k1*k2 + 3*k2^2*(8*ct^2 + st^2)) - 11*beta14*f*(16*k1^4 + 16*ct*k1^3*k2 - 24*k1^2*k3^2 - 48*ct*k1*k2*k3^2 - 3*k2^2*k3^2*(8*ct^2 + st^2)))) + 11*b1*f*(3*beta19*k1*((-1 + 2*C)*k1^3 + (-3 + 4*C)*ct*k1^2*k2 + 2*(-1 + C)*ct^2*k1*k2^2 + (1 - 2*C)*k1*k3^2 + ct*k2*k3^2)*(4*k1^2 + 16*ct*k1*k2 + 12*ct^2*k2^2 + 4*k3^2 - 3*k2^2*st^2) + k2*(8*ct^4*k2^3*(-9*(-1 + C)*gr1*k1^2 + 5*beta17*k2^2) - 4*ct^3*k1*k2^2*((9*beta15 + 8*(-5*beta17 + beta18))*k2^2 + gr1*((-39 + 48*C)*k1^2 + 2*(3 + 8*f - 3*K)*k2^2 + 3*(7 - 4*C)*k3^2)) - k2*(-36*beta16*k1^4 - 24*beta17*k1^4 + 8*beta18*k1^4 - 12*gr1*K*k1^4 + 12*beta16*k1^2*k3^2 - 24*beta17*k1^2*k3^2 + 8*beta18*k1^2*k3^2 + 12*gr1*K*k1^2*k3^2 + 9*gr1*k1^4*st^2 - 18*C*gr1*k1^4*st^2 + 9*beta16*k1^2*k2^2*st^2 - 30*beta17*k1^2*k2^2*st^2 + 9*beta18*k1^2*k2^2*st^2 + 12*f*gr1*k1^2*k2^2*st^2 - 9*gr1*k1^2*k3^2*st^2 + 18*C*gr1*k1^2*k3^2*st^2 - 3*beta17*k2^2*k3^2*st^2 - 6*f*gr1*k2^2*k3^2*st^2 + 10*beta17*k2^4*st^4 + 3*beta15*k1^2*(4*k1^2 + 4*k3^2 - 3*k2^2*st^2) + 3*beta14*(8*k1^4 - 12*k1^2*k3^2 - 4*k3^4 + 3*k2^2*k3^2*st^2)) + 6*ct^2*k2*(k2^2*(-14*beta15*k1^2 + 6*beta16*k1^2 + 40*beta17*k1^2 - 12*beta18*k1^2 + 6*beta14*k3^2 + 4*beta17*k3^2 + 5*beta17*k2^2*st^2) + gr1*((18 - 28*C)*k1^4 + 4*k3^2*((1 + 2*f)*k2^2 + k3^2) + k1^2*(2*(-11 + 14*C)*k3^2 + k2^2*(-6 - 16*f + 10*K - 3*st^2 + 3*C*st^2)))) + ct*k1*(k2^2*(-24*beta14*(k1^2 - 3*k3^2) + 24*beta16*(3*k1^2 - k3^2) - 3*beta15*(20*k1^2 + 4*k3^2 - 3*k2^2*st^2) - 4*beta18*(12*k1^2 + 4*k3^2 + 3*k2^2*st^2) + 12*beta17*(12*k1^2 + 4*k3^2 + 5*k2^2*st^2)) + gr1*((24 - 48*C)*k1^4 + 24*(1 - 2*C)*k3^4 - 24*f*k2^4*st^2 + k2^2*k3^2*(12 + 32*f - 24*K + 9*st^2) + k1^2*(48*(-1 + 2*C)*k3^2 + k2^2*(-12 - 32*f + 48*K - 27*st^2 + 36*C*st^2))))))))\/(k1^2*k2*k3^4)"