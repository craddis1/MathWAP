"(b1*D1^4*(7*gr2*k1*k2^2*(k1^2 + k3^2)*(b2*k3^2 + 2*g2*(k1^2 + 2*ct*k1*k2 + ct^2*k2^2 - k3^2)) + b1*(gr2*k2^2*(k1^2 + k3^2)*(-3*k1^3 + ct*k1^2*k2 + 4*ct^2*k1*k2^2 + 3*k1*k3^2 - 7*ct*k2*k3^2) + k1*k3^2*(beta7*k1*(k1^3 + 9*ct*k1^2*k2 + 8*ct^2*k1*k2^2 - k1*k3^2 - 7*ct*k2*k3^2) + beta6*k1*(-3*k1^3 + ct*k1^2*k2 + 4*ct^2*k1*k2^2 + 3*k1*k3^2 - 7*ct*k2*k3^2) + 7*k2^2*(-(beta11*k1*(k1 + ct*k2)) + beta12*(k1^2 + k3^2)))))*Pk1*Pk3)\/(7*k1^3*k2^2*k3^4) + (D1^4*(7*b1^2*(2*beta13 - beta8)*k1^2*k2^2*k3^2 + 7*(gr1^2 + 2*f*gr2)*k1^2*k2^2*(b2*k3^2 + 2*g2*(k1^2 + 2*ct*k1*k2 + ct^2*k2^2 - k3^2)) + b1*(beta7*f*k1*(k1^2 + k3^2)*(k1^3 + 9*ct*k1^2*k2 + 8*ct^2*k1*k2^2 - k1*k3^2 - 7*ct*k2*k3^2) - beta6*f*k1*(k1^2 + k3^2)*(3*k1^3 - ct*k1^2*k2 - 4*ct^2*k1*k2^2 - 3*k1*k3^2 + 7*ct*k2*k3^2) + k2^2*(7*beta14*gr1*k1^4 - 7*beta16*gr1*k1^4 - 3*gr1^2*k1^4 - 6*f*gr2*k1^4 + ct*gr1^2*k1^3*k2 + 2*ct*f*gr2*k1^3*k2 + 4*ct^2*gr1^2*k1^2*k2^2 + 8*ct^2*f*gr2*k1^2*k2^2 - 14*beta14*gr1*k1^2*k3^2 + 14*beta16*gr1*k1^2*k3^2 + 3*gr1^2*k1^2*k3^2 + 6*f*gr2*k1^2*k3^2 - 7*ct*gr1^2*k1*k2*k3^2 - 14*ct*f*gr2*k1*k2*k3^2 + 7*beta14*gr1*k3^4 - 7*beta16*gr1*k3^4 - 7*beta11*f*k1*(k1 + ct*k2)*(k1^2 + k3^2) + 7*beta12*f*(k1^2 + k3^2)^2)))*mu^2*Pk1*Pk3)\/(7*k1^2*k2^2*k3^4) + (D1^4*f*(beta7*f*k1*(k1^3 + 9*ct*k1^2*k2 + 8*ct^2*k1*k2^2 - k1*k3^2 - 7*ct*k2*k3^2) + beta6*f*k1*(-3*k1^3 + ct*k1^2*k2 + 4*ct^2*k1*k2^2 + 3*k1*k3^2 - 7*ct*k2*k3^2) - 7*k2^2*(beta11*f*k1*(k1 + ct*k2) - b1*(2*beta13 - beta8)*(k1^2 + k3^2) - beta12*f*(k1^2 + k3^2)))*mu^4*Pk1*Pk3)\/(7*k2^2*k3^4) + ((2*beta13 - beta8)*D1^4*f^2*k1^2*mu^6*Pk1*Pk3)\/k3^4 + (D1^4*(7*(gr1^2 + 2*f*gr2)*k1^2*k2^2*(b2*k3^2 + 2*g2*(k1^2 + 2*ct*k1*k2 + ct^2*k2^2 - k3^2)) + b1*(beta19*gr1*k1^6 + 9*beta19*ct*gr1*k1^5*k2 - 14*beta11*f*k1^4*k2^2 + 14*beta12*f*k1^4*k2^2 + 7*beta14*gr1*k1^4*k2^2 + 7*beta15*gr1*k1^4*k2^2 - 14*beta16*gr1*k1^4*k2^2 + 8*beta19*ct^2*gr1*k1^4*k2^2 - 3*gr1^2*k1^4*k2^2 - 6*f*gr2*k1^4*k2^2 - 14*beta11*ct*f*k1^3*k2^3 + 7*beta15*ct*gr1*k1^3*k2^3 + ct*gr1^2*k1^3*k2^3 + 2*ct*f*gr2*k1^3*k2^3 + 4*ct^2*gr1^2*k1^2*k2^4 + 8*ct^2*f*gr2*k1^2*k2^4 - 2*beta19*gr1*k1^4*k3^2 - 16*beta19*ct*gr1*k1^3*k2*k3^2 + 14*beta12*f*k1^2*k2^2*k3^2 - 14*beta14*gr1*k1^2*k2^2*k3^2 - 7*beta15*gr1*k1^2*k2^2*k3^2 + 14*beta16*gr1*k1^2*k2^2*k3^2 - 8*beta19*ct^2*gr1*k1^2*k2^2*k3^2 + 3*gr1^2*k1^2*k2^2*k3^2 + 6*f*gr2*k1^2*k2^2*k3^2 - 7*beta15*ct*gr1*k1*k2^3*k3^2 - 7*ct*gr1^2*k1*k2^3*k3^2 - 14*ct*f*gr2*k1*k2^3*k3^2 + beta19*gr1*k1^2*k3^4 + 7*beta19*ct*gr1*k1*k2*k3^4 + 7*beta14*gr1*k2^2*k3^4 + 2*beta7*f*k1^3*(k1^3 + 9*ct*k1^2*k2 + 8*ct^2*k1*k2^2 - k1*k3^2 - 7*ct*k2*k3^2) + 2*beta6*f*k1^3*(-3*k1^3 + ct*k1^2*k2 + 4*ct^2*k1*k2^2 + 3*k1*k3^2 - 7*ct*k2*k3^2)) + 7*b1^2*k2^2*((2*beta13 - beta8)*k1^2*k3^2 + f*gr2*(k1^4 - k3^4)))*mu*mu2*Pk1*Pk3)\/(7*k1^3*k2*k3^4) + (D1^4*(2*beta7*f^2*k1*(k1^3 + 9*ct*k1^2*k2 + 8*ct^2*k1*k2^2 - k1*k3^2 - 7*ct*k2*k3^2) + 2*beta6*f^2*k1*(-3*k1^3 + ct*k1^2*k2 + 4*ct^2*k1*k2^2 + 3*k1*k3^2 - 7*ct*k2*k3^2) - 7*k2^2*(f*(2*beta11*f*k1*(k1 + ct*k2) + (beta14 - beta16)*gr1*(k1^2 - k3^2) - 2*beta12*f*(k1^2 + k3^2)) + b1*((3*beta17*gr1 - beta18*gr1 - f*(gr1^2 + 2*f*gr2))*(k1^2 - k3^2) - 2*beta13*f*(3*k1^2 + k3^2) + beta8*f*(3*k1^2 + k3^2))))*mu^3*mu2*Pk1*Pk3)\/(7*k1*k2*k3^4) + (3*(2*beta13 - beta8)*D1^4*f^2*k1*k2*mu^5*mu2*Pk1*Pk3)\/k3^4 + (D1^4*(7*f*gr2*k1*k2^4*(b2*k3^2 + 2*g2*(k1^2 + 2*ct*k1*k2 + ct^2*k2^2 - k3^2)) + b1*k2^2*(beta19*gr1*k1^5 + f*gr2*k1^5 + 9*beta19*ct*gr1*k1^4*k2 + 9*ct*f*gr2*k1^4*k2 - 7*beta11*f*k1^3*k2^2 + 7*beta12*f*k1^3*k2^2 + 7*beta15*gr1*k1^3*k2^2 - 7*beta16*gr1*k1^3*k2^2 + 8*beta19*ct^2*gr1*k1^3*k2^2 - 3*f*gr2*k1^3*k2^2 + 8*ct^2*f*gr2*k1^3*k2^2 - 7*beta11*ct*f*k1^2*k2^3 + 7*beta15*ct*gr1*k1^2*k2^3 + ct*f*gr2*k1^2*k2^3 + 4*ct^2*f*gr2*k1*k2^4 - beta19*gr1*k1^3*k3^2 - 7*beta19*ct*gr1*k1^2*k2*k3^2 + 2*ct*f*gr2*k1^2*k2*k3^2 + 7*beta12*f*k1*k2^2*k3^2 - 7*beta14*gr1*k1*k2^2*k3^2 + 3*f*gr2*k1*k2^2*k3^2 + 8*ct^2*f*gr2*k1*k2^2*k3^2 - 7*ct*f*gr2*k2^3*k3^2 - f*gr2*k1*k3^4 - 7*ct*f*gr2*k2*k3^4 + beta7*f*k1^2*(k1^3 + 9*ct*k1^2*k2 + 8*ct^2*k1*k2^2 - k1*k3^2 - 7*ct*k2*k3^2) + beta6*f*k1^2*(-3*k1^3 + ct*k1^2*k2 + 4*ct^2*k1*k2^2 + 3*k1*k3^2 - 7*ct*k2*k3^2)) + 7*b1^2*k1*(f*gr2*k2^4*(k1^2 + k3^2) + k3^2*((beta13 + beta9)*k2^4 + beta10*k1*(-k1^3 + ct^2*k1*k2^2 + k1*k3^2 - 2*ct*k2*k3^2))))*mu2^2*Pk1*Pk3)\/(7*k1^3*k2^2*k3^4) - (D1^4*(f*k2^2*(beta19*gr1*k1^4 - gr1^2*k1^4 - 2*f*gr2*k1^4 + 9*beta19*ct*gr1*k1^3*k2 - 9*ct*gr1^2*k1^3*k2 - 18*ct*f*gr2*k1^3*k2 + 7*beta11*f*k1^2*k2^2 - 7*beta12*f*k1^2*k2^2 + 7*beta14*gr1*k1^2*k2^2 + 7*beta15*gr1*k1^2*k2^2 - 14*beta16*gr1*k1^2*k2^2 + 8*beta19*ct^2*gr1*k1^2*k2^2 - 8*ct^2*gr1^2*k1^2*k2^2 - 16*ct^2*f*gr2*k1^2*k2^2 + 7*beta11*ct*f*k1*k2^3 + 7*beta15*ct*gr1*k1*k2^3 - beta19*gr1*k1^2*k3^2 + gr1^2*k1^2*k3^2 + 2*f*gr2*k1^2*k3^2 - 7*beta19*ct*gr1*k1*k2*k3^2 + 7*ct*gr1^2*k1*k2*k3^2 + 14*ct*f*gr2*k1*k2*k3^2 - 7*beta12*f*k2^2*k3^2 - 14*beta14*gr1*k2^2*k3^2 + 7*beta16*gr1*k2^2*k3^2 - beta7*f*k1*(k1^3 + 9*ct*k1^2*k2 + 8*ct^2*k1*k2^2 - k1*k3^2 - 7*ct*k2*k3^2) + beta6*f*k1*(3*k1^3 - ct*k1^2*k2 - 4*ct^2*k1*k2^2 - 3*k1*k3^2 + 7*ct*k2*k3^2)) + 7*b1*(-(k2^4*(-3*beta8*f*k1^2 + beta9*f*k1^2 - 6*beta17*gr1*k1^2 + 2*beta18*gr1*k1^2 + 2*f*gr1^2*k1^2 + 3*f^2*gr2*k1^2 + beta9*f*k3^2 + 3*beta17*gr1*k3^2 - beta18*gr1*k3^2 - f*gr1^2*k3^2 - 3*f^2*gr2*k3^2 + beta13*f*(7*k1^2 + k3^2))) + beta10*f*k1*(k1^2 + k3^2)*(k1^3 + 2*ct*k2*k3^2 - k1*(ct^2*k2^2 + k3^2))))*mu^2*mu2^2*Pk1*Pk3)\/(7*k1^2*k2^2*k3^4) - (D1^4*f*((-7*beta13*f + 3*beta8*f - beta9*f - 3*beta17*gr1 + beta18*gr1 + f*gr1^2 + 2*f^2*gr2)*k2^4 + beta10*f*k1*(k1^3 + 2*ct*k2*k3^2 - k1*(ct^2*k2^2 + k3^2)))*mu^4*mu2^2*Pk1*Pk3)\/(k2^2*k3^4) - (D1^4*(f*k2^2*(7*gr1*k2^2*(-(beta16*k1^2) + beta15*k1*(k1 + ct*k2) - beta14*k3^2) + beta19*gr1*k1*(k1^3 + 9*ct*k1^2*k2 + 8*ct^2*k1*k2^2 - k1*k3^2 - 7*ct*k2*k3^2) - gr1^2*k1*(k1^3 + 9*ct*k1^2*k2 + 8*ct^2*k1*k2^2 - k1*k3^2 - 7*ct*k2*k3^2) - 2*f*gr2*k1*(k1^3 + 9*ct*k1^2*k2 + 8*ct^2*k1*k2^2 - k1*k3^2 - 7*ct*k2*k3^2)) + 7*b1*(-(k2^4*(4*beta13*f*k1^2 - beta8*f*k1^2 + 2*beta9*f*k1^2 - 4*beta17*gr1*k1^2 + beta18*gr1*k1^2 + f*gr1^2*k1^2 + 2*f^2*gr2*k1^2 + beta17*gr1*k3^2 - 2*f^2*gr2*k3^2)) + 2*beta10*f*k1^3*(k1^3 + 2*ct*k2*k3^2 - k1*(ct^2*k2^2 + k3^2))))*mu*mu2^3*Pk1*Pk3)\/(7*k1^3*k2*k3^4) - (D1^4*f*((-4*beta13*f + beta8*f - 2*beta9*f - 6*beta17*gr1 + 2*beta18*gr1 + 2*f*gr1^2 + 4*f^2*gr2)*k2^4 + 2*beta10*f*k1*(k1^3 + 2*ct*k2*k3^2 - k1*(ct^2*k2^2 + k3^2)))*mu^3*mu2^3*Pk1*Pk3)\/(k1*k2*k3^4) - (D1^4*(-(f^2*gr2*k2^2*(k1^3 + 9*ct*k1^2*k2 + 8*ct^2*k1*k2^2 - k1*k3^2 - 7*ct*k2*k3^2)) + 7*b1*k1*(-((beta13*f + beta9*f - beta17*gr1 + f^2*gr2)*k2^4) + beta10*f*k1*(k1^3 + 2*ct*k2*k3^2 - k1*(ct^2*k2^2 + k3^2))))*mu2^4*Pk1*Pk3)\/(7*k1^3*k3^4) - (D1^4*f*((-(beta13*f) - beta9*f - 4*beta17*gr1 + beta18*gr1 + f*gr1^2 + 3*f^2*gr2)*k2^4 + beta10*f*k1*(k1^3 + 2*ct*k2*k3^2 - k1*(ct^2*k2^2 + k3^2)))*mu^2*mu2^4*Pk1*Pk3)\/(k1^2*k3^4) + (D1^4*f*(beta17*gr1 - f^2*gr2)*k2^5*mu*mu2^5*Pk1*Pk3)\/(k1^3*k3^4)"